#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

int main() {
    int** a;  // Двумерный динамический массив
    int* sum_rows, * sum_cols;  // Динамические массивы для сумм строк и столбцов
    int n, m, i, j;
    setlocale(LC_ALL, "Russian");

    // Ввод размеров матрицы
    printf("Введите количество строк: ");
    scanf_s("%d", &m);
    printf("Введите количество столбцов: ");
    scanf_s("%d", &n);

    // Выделение памяти для строк матрицы
    a = (int**)malloc(m * sizeof(int*));
    if (a == NULL) {
        printf("Ошибка выделения памяти для матрицы!\n");
        return 1;
    }

    // Выделение памяти для каждого столбца
    for (i = 0; i < m; i++) {
        a[i] = (int*)malloc(n * sizeof(int));
        if (a[i] == NULL) {
            printf("Ошибка выделения памяти для столбцов!\n");
            return 1;
        }
    }

    sum_rows = (int*)malloc(m * sizeof(int));  // Для хранения суммы каждой строки
    sum_cols = (int*)malloc(n * sizeof(int));  // Для хранения суммы каждого столбца

    if (sum_rows == NULL || sum_cols == NULL) {
        printf("Ошибка выделения памяти для массивов сумм!\n");
        return 1;
    }

    printf("Массив случайных чисел %dx%d:\n", m, n);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            a[i][j] = rand() % 100;
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }

    // Вычисление сумм каждой строки
    for (i = 0; i < m; i++) {
        sum_rows[i] = 0;
        for (j = 0; j < n; j++) {
            sum_rows[i] += a[i][j];
        }
    }

    // Вычисление сумм каждого столбца
    for (j = 0; j < n; j++) {
        sum_cols[j] = 0;
        for (i = 0; i < m; i++) {
            sum_cols[j] += a[i][j];
        }
    }

    // Вывод суммы строк
    printf("Суммы строк:\n");
    for (i = 0; i < m; i++) {
        printf("Сумма строки %d: %d\n", i + 1, sum_rows[i]);
    }

    // Вывод суммы столбцов
    printf("Суммы столбцов:\n");
    for (j = 0; j < n; j++) {
        printf("Сумма столбца %d: %d\n", j + 1, sum_cols[j]);
    }

    // Освобождение памяти
    for (i = 0; i < m; i++) {
        free(a[i]);  // Освобождение памяти для каждого столбца
    }
    free(a);  // Освобождение памяти для строк
    free(sum_rows);  // Освобождение памяти для массива сумм строк
    free(sum_cols);  // Освобождение памяти для массива сумм столбцов

    return 0;
}