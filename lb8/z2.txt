#include <iostream>   
#include <queue>      
using namespace std;  

// Структура узла для списка смежности 
struct node {
    int n;            
    node* next;       
    node(int _n) : n(_n), next(nullptr) {} 
};

// Структура для очереди, реализованной через связанный список
struct list {
    node* first;      
    node* last;      
    list() : first(nullptr), last(nullptr) {}  


    bool is_empty() { return first == nullptr; }

    // Метод для добавления элемента в конец очереди
    void add_back(int _n) {
        node* p = new node(_n);  
        if (is_empty()) {         
            first = p;              
            last = p;
            return;
        }
        last->next = p;           
        last = p;                 
    }

    // Метод для удаления первого элемента из очереди
    void dlt() {
        if (is_empty()) return;   
        node* p = first;          
        first = p->next;        
        delete p;                
    }
};

// Функция для создания случайного графа в виде матрицы смежности
int** creatG(int len) {
    int** G;                   
    srand(time(0));           
    G = new int* [len];        

    
    for (int i = 0; i < len; i++) {
        G[i] = new int[len];     
    }

  
    for (int i = 0; i < len; i++) {
        for (int j = i; j < len; j++) {
            if (i == j) G[i][i] = 0; 
            else {
                G[i][j] = rand() % 2;   
                G[j][i] = G[i][j];     
            }
        }
    }
    return G;  
}

// Функция для вывода матрицы смежности
void printG(int** G, int len) {
    for (int i = 0; i < len; i++) {       
        for (int j = 0; j < len; j++) {     
            cout << G[i][j] << " ";           
        }
        cout << "\n";                       
    }
    cout << "\n";                         
}

// Функция для обхода графа в ширину с использованием стандартной очереди
void BFS(int v, int len, bool* num, int** G) {
    queue<int> q;                 // Создаем очередь
    q.push(v);                    // Помещаем начальную вершину в очередь
    num[v] = true;               
    while (!q.empty()) {          
        v = q.front();              
        q.pop();                   
        cout << v + 1 << " ";       

        // Проверяем все смежные вершины
        for (int i = 0; i < len; i++) {
            if (G[v][i] == 1 && num[i] == false) {  
                q.push(i);                           
                num[i] = true;                        
            }
        }
    }
    cout << "\n"; 
}
// Функция для обхода графа в ширину с использованием собственной очереди
void BFS_queue(int v, int len, bool* num, int** G) {
    list q;                        // Создаем очередь, реализованную через связанный список
    q.add_back(v);                  // Добавляем начальную вершину в очередь
    num[v] = true;                  
    while (!q.is_empty()) {        
        v = q.first->n;               
        q.dlt();                     
        cout << v + 1 << " ";         

        // Проверяем все смежные вершины
        for (int i = 0; i < len; i++) {
            if (G[v][i] == 1 && num[i] == false) {  
                q.add_back(i);                            
                num[i] = true;                           
            }
        }
    }
}


int main() {
    setlocale(LC_ALL, "");  
    int** G, len, start;    
    cout << "Введите длину графа: ";
    cin >> len;             

    bool* num;               
    num = new bool[len];      
    for (int i = 0; i < len; i++) num[i] = false;  

    G = creatG(len);         
    printG(G, len);          

    cout << "Введите номер вершины, с которой начинается обход: ";
    cin >> start;             

    time_t start1 = clock();  
    BFS(start - 1, len, num, G);  
    for (int i = 1; i < len; i++) {  
        if (num[i] == false)  BFS(i, len, num, G);
    }
    time_t end1 = clock();    

    delete[]num;              

    num = new bool[len];    
    for (int i = 0; i < len; i++) num[i] = false;  

    time_t start2 = clock();  
    BFS_queue(start - 1, len, num, G);  
    time_t end2 = clock();    

   
    cout << "\nВремя выполнения с использованием встроенного класса: " << (end1 - start1) / 1000.0;
    cout << "\nВремя выполнения с использованием самостоятельно реализованного метода: " << (end2 - start2) / 1000.0;
    return 0;
}