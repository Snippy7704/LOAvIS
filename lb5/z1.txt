#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>
#include <random>
int main() {
    int m = 5; // Количество вершин
    int Gsize = 0;
    int** G;
    int* deg;
    srand(time(NULL)); // Инициализация генератора случайных чисел
    setlocale(LC_ALL, "");

    printf("1 задание:\nМатрица смежности для неориентированного графа:\n");

    // Выделение памяти для матрицы смежности
    G = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        G[i] = (int*)malloc(m * sizeof(int));
    }

    // Генерация симметричной матрицы смежности

    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= i; j++) {
            if (i == j) {
                G[i][j] = 0; // На диагонали всегда 0
            }
            else {
                G[i][j] = rand() % 2; // Случайное значение 0 или 1
                G[j][i] = G[i][j];    // Симметричность
            }
        }
    }
    // Вывод матрицы смежности
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d ", G[i][j]);
        }
        printf("\n");
    }

    printf("\nЗадание 2: "); //Определите размер графа G, используя матрицу смежности графа.
    for (int i = 0; i < m; i++) {
        for (int j = i + 1; j < m; j++) { // Проверяем только верхнюю часть матрицы, чтобы не учитывать ребра дважды
            if (G[i][j] == 1) {
                Gsize++;
            }
        }
    }
    printf("Размер графа = %d\n", Gsize);

    printf("\nЗадание 3: \n");// поиск изолированных, концевых и доминирующи вершин.
    deg = (int*)malloc(m * sizeof(int)); // массив степеней вершин
    for (int i = 0; i < m; i++) {
        deg[i] = 0;
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            if (G[i][j] == 1) {
                deg[i]++;
            }
        }
        printf("Степень вершины %d = %d\n", i + 1, deg[i]);
    }

    // Поиск изолированных, концевых и доминирующих вершин
    for (int i = 0; i < m; i++) {
        if (deg[i] == 0) {
            printf("Вершина %d изолированная\n", i + 1);
        }
        if (deg[i] == 1) {
            printf("Вершина %d концевая\n", i + 1);
        }
        if (deg[i] == m - 1) {
            printf("Вершина %d доминирующая\n", i + 1);
        }
    }

    // Освобождение памяти
    for (int i = 0; i < m; i++) {
        free(G[i]);
    }
    free(G);
    free(deg);

    return 0;
}
