#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>
#include <random>
int main() {
    int m = 5;
    int e = 0; // Количество рёбер (сначала оно не известно)
    int** G;   // Матрица смежности
    int** I;   // Матрица инцидентности
    int* deg;
    srand(time(NULL));
    setlocale(LC_ALL, "");

    // Выделение памяти для матрицы смежности
    G = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        G[i] = (int*)malloc(m * sizeof(int));
    }

    // Генерация матрицы смежности
    printf("Матрица смежности для неориентированного графа:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= i; j++) {
            if (i == j) {
                G[i][j] = 0; // На диагонали всегда 0
            }
            else {
                G[i][j] = rand() % 2; // Случайное значение 0 или 1
                G[j][i] = G[i][j];    // Симметричность
            }
        }
    }

    // Подсчет количества рёбер
    for (int i = 0; i < m; i++) {
        for (int j = i + 1; j < m; j++) {
            if (G[i][j] == 1) {
                e++;
            }
        }
    }

    // Вывод матрицы смежности
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d ", G[i][j]);
        }
        printf("\n");
    }

    // Выделение памяти для матрицы инцидентности
    I = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        I[i] = (int*)malloc(e * sizeof(int));
        for (int j = 0; j < e; j++) {
            I[i][j] = 0; // Инициализация нулями
        }
    }

    // Заполнение матрицы инцидентности на основе матрицы смежности
    int edge_index = 0;
    for (int i = 0; i < m; i++) {
        for (int j = i + 1; j < m; j++) {
            if (G[i][j] == 1) {
                I[i][edge_index] = 1;
                I[j][edge_index] = 1;
                edge_index++;
            }
        }
    }

    // Вывод матрицы инцидентности
    printf("\nМатрица инцидентности:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < e; j++) {
            printf("%d ", I[i][j]);
        }
        printf("\n");
    }

    // Размер графа
    printf("\nРазмер графа = %d\n", e);

    // Поиск степеней вершин
    printf("\nПоиск степеней вершин:\n");
    deg = (int*)malloc(m * sizeof(int));
    for (int i = 0; i < m; i++) {
        deg[i] = 0; // Инициализация
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < e; j++) {
            if (I[i][j] == 1) {
                deg[i]++;
            }
        }
        printf("Степень вершины %d = %d\n", i + 1, deg[i]);
    }

    // Поиск изолированных, концевых и доминирующих вершин
    for (int i = 0; i < m; i++) {
        if (deg[i] == 0) {
            printf("Вершина %d изолированная\n", i + 1);
        }
        if (deg[i] == 1) {
            printf("Вершина %d концевая\n", i + 1);
        }
        if (deg[i] == e) {
            printf("Вершина %d доминирующая\n", i + 1);
        }
    }

    // Освобождение памяти
    for (int i = 0; i < m; i++) {
        free(G[i]);
        free(I[i]);
    }
    free(G);
    free(I);
    free(deg);

    return 0;
}